name: 🚀 Deploy Fitlog API

on:
  push:
    branches: [main, feature/v2-cloud-migration]
    paths:
      - 'api/**'
      - 'fitlog/**'
      - 'pyproject.toml'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'api/**'
      - 'fitlog/**'
      - 'pyproject.toml'

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: fitlog-dev-api
  PYTHON_VERSION: '3.13'

jobs:
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: 🔧 Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[dev,test]"
        
    - name: 🧹 Lint with ruff
      run: |
        source .venv/bin/activate
        uv run ruff check .
        
    - name: 🎨 Format check with black
      run: |
        source .venv/bin/activate
        uv run black --check .
        
    - name: 🔍 Type check with mypy
      run: |
        source .venv/bin/activate
        uv run mypy fitlog/ --ignore-missing-imports
        
    - name: 🧪 Run tests
      run: |
        source .venv/bin/activate
        uv run pytest -v
        
  deploy:
    name: 🚀 Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/v2-cloud-migration'
    # environment: production  # Add this later in GitHub repo settings for deployment protection
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 📦 Install UV and dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv venv
        source .venv/bin/activate
        uv pip install -e ".[cloud]"
        
    - name: 📦 Create Lambda deployment package
      run: |
        # Create deployment directory
        mkdir -p lambda-deploy
        
        # Copy FastAPI application code
        cp -r api/* lambda-deploy/ 2>/dev/null || echo "No api/ directory yet"
        cp -r fitlog lambda-deploy/
        
        # Install dependencies to deployment directory
        source .venv/bin/activate
        pip install \
          fastapi \
          uvicorn \
          duckdb \
          pydantic \
          boto3 \
          mangum \
          --target lambda-deploy/
          
        # Create Lambda handler if it doesn't exist
        if [ ! -f lambda-deploy/main.py ]; then
          cat > lambda-deploy/main.py << 'EOF'
        import json
        from mangum import Mangum
        from fastapi import FastAPI
        
        # Import your fitlog modules here
        # from fitlog.models import Run, Pushup
        # from fitlog.db import init_db
        
        app = FastAPI(
            title="Fitlog API",
            description="Personal exercise tracking API",
            version="2.0.0"
        )
        
        @app.get("/")
        async def health_check():
            return {
                "message": "Fitlog API v2.0.0",
                "status": "healthy",
                "environment": "cloud"
            }
            
        @app.get("/runs")
        async def get_runs():
            return {"message": "Get runs endpoint - implement with DuckDB S3"}
            
        @app.post("/runs")
        async def create_run():
            return {"message": "Create run endpoint - implement with DuckDB S3"}
            
        @app.get("/pushups")
        async def get_pushups():
            return {"message": "Get pushups endpoint - implement with DuckDB S3"}
            
        @app.post("/pushups")
        async def create_pushups():
            return {"message": "Create pushups endpoint - implement with DuckDB S3"}
            
        @app.get("/activities/status")
        async def get_status():
            return {"message": "Activity status endpoint - implement with DuckDB S3"}
        
        # Lambda handler
        handler = Mangum(app)
        EOF
        fi
        
        # Create deployment zip
        cd lambda-deploy
        zip -r ../lambda-deployment.zip . -x "*.pyc" "*/__pycache__/*"
        cd ..
        
    - name: 🚀 Deploy to Lambda
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip \
          --region ${{ env.AWS_REGION }}
          
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
          
    - name: 🧪 Test deployment
      run: |
        # Get function URL or API Gateway endpoint
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --query FunctionUrl \
          --output text \
          --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
          
        if [ -n "$FUNCTION_URL" ]; then
          echo "Testing Lambda Function URL: $FUNCTION_URL"
          curl -f "$FUNCTION_URL" || exit 1
        else
          echo "Testing API Gateway endpoint..."
          # Construct API Gateway URL (adjust if needed)
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='fitlog-dev-api'].id" \
            --output text \
            --region ${{ env.AWS_REGION }})
          if [ -n "$API_ID" ]; then
            curl -f "https://${API_ID}.execute-api.${{ env.AWS_REGION }}.amazonaws.com/dev" || exit 1
          fi
        fi
        
    - name: 📊 Report deployment
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "🔗 API Gateway: https://$(aws apigateway get-rest-apis --query "items[?name=='fitlog-dev-api'].id" --output text).execute-api.${{ env.AWS_REGION }}.amazonaws.com/dev"
        echo "📦 Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "🌎 Region: ${{ env.AWS_REGION }}" 