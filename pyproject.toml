[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fitlog"
version = "0.1.0"
description = "A CLI tool for tracking daily exercise habits"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    { name = "fitlog", email = "fitlog@example.com" }
]
keywords = ["fitness", "tracking", "cli", "running", "exercise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Utilities",
]
dependencies = [
    "rich>=13.7.0",
    "typer>=0.9.0",
    "pydantic>=2.6.1",
    "duckdb>=0.10.0",
    "python-dateutil>=2.8.2",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
cloud = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "boto3>=1.34.0",
    "aioboto3>=12.0.0",
    "mangum>=0.17.0",
]

[project.scripts]
fitlog = "fitlog.cli:app"

[project.urls]
Homepage = "https://github.com/silverbeer/fitlog"
Repository = "https://github.com/silverbeer/fitlog.git"
Issues = "https://github.com/silverbeer/fitlog/issues"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py313"
src = ["fitlog", "tests", "api"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Exception chaining (raise ... from err) - can be added later
    "F821",  # Undefined name (temporary for Split model)
    "F841",  # Local variable assigned but never used (common in stubs)
    "ARG001", # Unused function arguments (common in CLI and Lambda handlers)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]
"api/**/*" = ["ARG"]

[tool.ruff.lint.isort]
known-first-party = ["fitlog", "api"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration (lenient for now)
[tool.mypy]
python_version = "3.13"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "api.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["fitlog", "api"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
